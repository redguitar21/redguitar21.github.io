<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-05-12T23:10:56+08:00</updated><id>http://localhost:4000/</id><title type="html">石曙光的个人网站</title><subtitle>记录我的生活、点滴感想与学习成长, 用五年时间，循序渐进，逐步精进。</subtitle><entry><title type="html">失败的成功</title><link href="http://localhost:4000/life/2018/05/12/failed-but-win.html" rel="alternate" type="text/html" title="失败的成功" /><published>2018-05-12T22:54:00+08:00</published><updated>2018-05-12T22:54:00+08:00</updated><id>http://localhost:4000/life/2018/05/12/failed-but-win</id><content type="html" xml:base="http://localhost:4000/life/2018/05/12/failed-but-win.html">&lt;p&gt;(转)原作者：&lt;a href=&quot;http://www.ruanyifeng.com/blog/2010/09/getting_rejected.html&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;阮一峰&lt;/code&gt;的博客上看到一篇文章(事实上我今天看了很多篇，都很喜欢)，深受感动和震撼，觉得写得真好。特别是现阶段，对我的影响可谓很大。
标题是我新冠的，原文请见上面链接。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;昨天，先是看到一个老外，说了一句很震撼的话。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;你个人的项目，应该有四分之一会失败，否则就说明你的冒险精神不够。&quot;

(Expect and hope that a quarter of your projects fail. If not, you're not taking enough risks.
 --Adam Smith)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我心里一动，心想这些天，我是不是把个人的失败看得太重了？&lt;/p&gt;

&lt;p&gt;失败完全可以理解成积极进取的结果，只有生命力充沛的人，才可能会有一次又一次的失败。一味地恐惧失败，只会让自己畏首畏尾，丧失进取心。&lt;/p&gt;

&lt;p&gt;没料到，几个小时之后，创业家Chris Dixon也谈到了这个话题。&lt;/p&gt;

&lt;p&gt;他说：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;八年前，找工作时，我四处碰壁。投了几百份简历，一无所获。大公司不给我面试机会，风投公司说
他们只要有经验的人，而创业公司那时正在大批裁员。宏观经济糟透了，我自己的领域（互联网消费）
一落千丈，我的简历又缺乏亮点，于是就一次又一次地被拒绝。&quot;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是，Chris Dixon后来感到，这一段经历对自己职业生涯的帮助最大。为什么？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;因为这些挫折让我的脸皮变厚了。

我开始意识到，雇主只是拒绝我的简历，而不是拒绝我这个人。既然不是对个人的否定，我又害怕失去
什么呢？所以，我就更加大胆（或者说更加厚脸皮）地去找工作了。  

最后，终于有一家公司愿意雇佣我（感谢他们不看重我的简历），此后的一切都很顺利，我走上了事业
起飞的大道。&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;他得出了结论：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;遭受挫折，并不是坏事。因为，人生的最终结果是一个极大值函数（由所有尝试中最成功的一次决定），
而不是一个平均值函数。

即使现在，我每天在生活中，还是会遭到拒绝。朋友想安慰我，但是我却要告诉他：之所以会这样，
只是因为我在不停尝试。

如果你不是每天被人拒绝，那就说明你的人生目标不够远大。&quot;

（If you aren't getting rejected on a daily basis, your goals aren't ambitious enough.）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;读到最后一句话，我的心豁然开朗。这个夏天挥之不去的一些烦恼，顿时平静了。&lt;/p&gt;

&lt;p&gt;丘吉尔说过，”所谓成功，就是不停地经历失败，并且始终保持热情。”（Success is going from failure to failure without losing enthusiasm.）一次又一次地被拒绝，是你的勇气和进取心的最好证明。它们决定了你可以走多远，把你和那些决心放弃的人拉开差距。&lt;/p&gt;

&lt;p&gt;所以，不要害怕被拒绝，这其实是对你的肯定和褒扬。&lt;/p&gt;

&lt;p&gt;（完）&lt;/p&gt;</content><author><name></name></author><summary type="html">(转)原作者：阮一峰</summary></entry><entry><title type="html">《软件测试-经验与教训》读书笔记</title><link href="http://localhost:4000/test/2018/05/11/test-blog-record.html" rel="alternate" type="text/html" title="《软件测试-经验与教训》读书笔记" /><published>2018-05-11T20:07:00+08:00</published><updated>2018-05-11T20:07:00+08:00</updated><id>http://localhost:4000/test/2018/05/11/test-blog-record</id><content type="html" xml:base="http://localhost:4000/test/2018/05/11/test-blog-record.html">&lt;p&gt;一个月前，我是何等雄心壮志，想向软件测试业的泰山北斗学习，然后自己成为国内数一数二的测试学者。
没想到过了也许一个月后，我居然毅然决然的想离开这个行业。
说来很神奇，人生有很多巧合，但是没有后悔药。如果我当时不离开诺基亚，则怎么也不会知道，自己将最终明确的决定，永远也不应该再进入这个行业。
也就是说，以前混沌的没想清楚的事情，现在非常果断、明确、清晰的有了自己的概念。有了自己的定论，这是自己思考的结果。所以就毅然决定了：必须转。
虽然阵痛会很长，转型过程会很痛苦、艰难，但我非转不可。&lt;/p&gt;

&lt;p&gt;但是呢，那些天，以及最近这阵子早上起来，在上班前都会花一个半小时时间看书，包括这些测试书，对我的影响很大。
虽然不做测试行业了，但是这些当今世界上测势界为数不多的几位泰山北斗的真知灼见，仍使我大受震动。所学到的绝不仅仅只是专业领域，而是涉及到人生的方方面面。
这也正就是google所渴望的创意精英们。向这几位泰山北斗致敬。
他们分别是&lt;code class=&quot;highlighter-rouge&quot;&gt;Cem Kaner&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;James Bach&lt;/code&gt;（另外一位James将在另一篇文章中介绍）、&lt;code class=&quot;highlighter-rouge&quot;&gt;Bret Pettichord&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/test1/kanner.jpg&quot; alt=&quot;Cem Kaner&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Cem Kaner&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/test1/jamesteaching.jpg&quot; alt=&quot;James Bach&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;James Bach&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/test1/Pettichord.jpg&quot; alt=&quot;Bret Pettichord&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Bret Pettichord&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;也许，最广泛采用的手段仍是专门定制的测试，即依靠测试员的技能和直觉（探索性测试）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于这件关键工作，我们要从头至尾地在一个项目中逐渐改进，一个项目一个项目的改进。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们的工作就是探索。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试就是要找到信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试员要与自己的经历协商使命问题，并明确使命。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;告诉项目经历自己能做什么，不能做什么。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;特别是到了项目要结束的时候。要以明确、简洁的词汇编写测试报告，以便执行经历能够感到有做出决策的依据。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;首先测试经过变更的部分  
首先测试核心功能  
首先测试能力  
首先测试常见情况  
首先测试影响最大的问题  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;理想情况是，程序员为了修改测试员找出的问题忙的团团转，使程序员，而不是测试员，成为项目的瓶颈。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数学和科学推理过程是探索式的，而不是脚本化的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;问题是没有想象出测试的总体大纲&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;黑盒测试的优势在于测试员可能与程序员的思考不同，因此可能测出程序员所遗漏的风险。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;要研究建模问题。测试员对建模艺术越精通，越能更好的测试。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;探索要求大量思索&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要前向、后向、侧向思考。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;测试的目的是显示产品失败，要比显示产品正常更有力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;产品应该具备或满足的任何质量或者条件都是需求。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;有时复杂性可能是无法抗拒的。测试员的意志可能会被击垮。因此，当要测试复杂和使人畏惧的功能集合时，可间歇进行。人的头脑具有处理复杂问题的惊人能力，但是不要指望马上就能理解复杂产品。
可试着先研究复杂产品30分钟或一个小时，然后停下来干点别的。这就是陷入与退出（plunge in and quit）法。不要担心在这段不长的时间内效率不高。如果觉得问题太多，则尽快退出。
经过几个轮次的陷入与退出，就会开始明白产品的模式和轮廓，很快就会在头脑中更系统、更具体地测试和研究策略。这种方法很神奇。最终，会掌握足够的知识，以设计全面的测试计划。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;未完待续….
[24]&lt;/p&gt;

&lt;p&gt;推荐的书:&lt;br /&gt;
《批判性思维的工具：心理学的元思想》&lt;br /&gt;
《思考与决策》&lt;br /&gt;
《研究的技巧》&lt;br /&gt;
《狂野中的认知》&lt;br /&gt;
《理论与证据：科学与推理的能力的开发》&lt;br /&gt;
《通用系统思考论》&lt;br /&gt;
《探索数据分析》&lt;/p&gt;</content><author><name>石曙光</name></author><summary type="html">一个月前，我是何等雄心壮志，想向软件测试业的泰山北斗学习，然后自己成为国内数一数二的测试学者。 没想到过了也许一个月后，我居然毅然决然的想离开这个行业。 说来很神奇，人生有很多巧合，但是没有后悔药。如果我当时不离开诺基亚，则怎么也不会知道，自己将最终明确的决定，永远也不应该再进入这个行业。 也就是说，以前混沌的没想清楚的事情，现在非常果断、明确、清晰的有了自己的概念。有了自己的定论，这是自己思考的结果。所以就毅然决定了：必须转。 虽然阵痛会很长，转型过程会很痛苦、艰难，但我非转不可。</summary></entry><entry><title type="html">面试小记</title><link href="http://localhost:4000/life/2018/05/11/interview_thought.html" rel="alternate" type="text/html" title="面试小记" /><published>2018-05-11T17:08:00+08:00</published><updated>2018-05-11T17:08:00+08:00</updated><id>http://localhost:4000/life/2018/05/11/interview_thought</id><content type="html" xml:base="http://localhost:4000/life/2018/05/11/interview_thought.html">&lt;p&gt;先描述一下刚刚收到的淘宝的技术官的电话面试吧&lt;br /&gt;
&lt;strong&gt;问的问题主要有&lt;/strong&gt;：&lt;br /&gt;
1、先介绍一下自己这几年技术方面的东西（这个技术官人不错，废话不多，直入主题，要求都是干货）。&lt;br /&gt;
2、在&lt;code class=&quot;highlighter-rouge&quot;&gt;诺基亚&lt;/code&gt;做的java项目的技术细节，步步追问，问的很细，然后问性能的解决方案，架构上的不足的解决方案等等。&lt;br /&gt;
3、诺基亚做的项目中最难的是哪一项。刚刚聊的技术实现按过程中，最复杂的是哪一项。具体介绍。&lt;br /&gt;
4、&lt;code class=&quot;highlighter-rouge&quot;&gt;JVM&lt;/code&gt;相关：&lt;code class=&quot;highlighter-rouge&quot;&gt;GC&lt;/code&gt;等。&lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap&lt;/code&gt;线程安全等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/interview/Java.png&quot; alt=&quot;java&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不得不说，这一次是一次非常专业的面试，想浑水摸鱼是不可能的。但也不得不说，这是我这几天来，面的比较开心的一次。
原因不是我答的好，相反，我后面很多东西没答出来，有些甚至只好说不知道。而是因为这是不涉及其它任何乱七八糟问题的一次单纯技术性面试。
没有问我现在工资，然后以技术考核来压价。也没有问我为什么要转测试，然后再转开发。我这些问题回答的都想吐了。然后他一点都没问，我很感激。
其实这应该是HR的问题，很多人越权了。我甚至遇过，第一轮小罗罗面我，都直接问我薪资期望的。然后又觉得我开的比他高那么多，直接在他那一层就给我否了。&lt;/p&gt;

&lt;p&gt;其实今天下午出去也面了一家。我心里没底，因为Java的从业经验确实很短，对于目前社会上的各个IT公司所要求的种种技术的应用几乎是0经验。所以我觉得，希望不大，但又是抱着侥幸。&lt;br /&gt;
侥幸什么的，就是他会看重我的其他东西———潜力。我想几乎找不到这样的企业。所以只能说是碰碰运气。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/interview/mianshiji-1.jpg&quot; alt=&quot;interview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实我有C++的功底，对于Java语言根本不成问题。主要是对当前流行的架构，比如dubbo、zookeeper等等没有切实的使用体验，说不出道道来。故我没什么自信。
但是，这次我转是必然的。我死也不想再做测试了。就算是自动化也好、工具平台的开发也好，我都不想去，很多情况下，这些说法都是幌子而已。
我后端都如此碰壁，所以可想而知我的前端之路会多么坎坷。
虽然在Boss直聘上挂上前端、后端、C/C++之后，前两者每天来找我的人都不下20个。都是不同的公司。
一方面我考虑要不要下架我的这些求职意向，以免以后的工作机会都浪费掉了。
二方面我又担心错过也许可能的某种特殊机会。&lt;/p&gt;

&lt;p&gt;从另一个角度讲，我要考虑筛选绝大部分公司不去，因为这些公司去了都没意义。而很多是HR直接筛选完叫你去，根本没有通过技术官的检查，或者只是初步检查说你合适，但是现场，却
仅仅考核了一些问题就觉得你没经验，但往往这些问题电话里就可以沟通，或者简历里就可以看出。比如我的java开发经验不足一年，为什么到现场了才跟我说我经验太少了。
还有就是，我要考虑闭关还是怎么着，总之把一些基础补回来。通过技术论坛、看书，开源代码实践，做一些小例子，像阮一峰那样，我想那些东西也难不倒哪里去。
那些Java的人普遍怕C++，我C++都不怕，还怕这个？我只是少了这些实践机会而已。所以，如果再三碰壁，发现目前的开发行业现状后，就索性突击这些方向好了。
指望，一家公司培养你，在国内在杭州，几乎不太可能。这里没有像谷歌那么伟大的公司，他们把专业领域的只是看在第三，而更追求通才。更追求有头脑、有创意有智慧的人，发掘不一般的人。
他们认为，某一领域的技术能力是容易掌握的，只要你智商具有平均水平，但是具有灵性的&lt;code class=&quot;highlighter-rouge&quot;&gt;创新精英&lt;/code&gt;，是真正的杰出人才，就像极具天分的艺术家一样，是数一数二、风毛菱角、万里挑一的。
没有伯乐，这样的人才也许就一直被埋没着。&lt;/p&gt;

&lt;p&gt;反观国内，那些公司看重第一位的绝对是你的工作经验，并且是工作经验里面的那些“词”。什么词呢，比如区块链，比如分布式，比如机器学习。假设他们招的是机器学习，那么你的专业里
有机器学习这四个字，那么你就是如虎添翼、志在必得了。因为他们看到这与他们jd里面一样的字词的时候，甚至会达到颅内高潮，认为他们找到了真正的人才。可以这么说，他们跟那个词恋爱了，看到就会心动。
又或者他们现在再用&lt;code class=&quot;highlighter-rouge&quot;&gt;dubbo&lt;/code&gt;+&lt;code class=&quot;highlighter-rouge&quot;&gt;zookeeper&lt;/code&gt;，那么你在你的简历上写上这些，他们就瞬间觉得你漂亮了，但是如果你说你了解这些，但是愿意学，他们则觉得你低人好几等，因为你不会。
但是他们或许没有想过：1、他会的能力有多深，是爱好使然的深深钻研，还是浅尝辄止，只知皮毛而能扯蛋而已。
2、这会与不会之间，也许只隔了一点点区别。即我以前工作中没接触过，而他以前因为工作关系不得不接触到一些。而他们会认为，他在工作中使用过，而我就算在业余再深入研究，也认为我是野狐禅。
他们仿佛有某种崇拜，他们对很多东西贴了标签。即，他java有三年经验，所以他肯定比java只有一年经验的人好，丰富，能干。他曾经没有接触过这个但是愿意学，但是另一个人曾经在工作中接触过这个就肯定认为后者更强。
还有，他曾经在阿里干过，所以技术绝对屌炸天，绝对高人一等。很多公司甚至看到BAT公司出来的员工，都有一种迷信，照单全收。&lt;/p&gt;

&lt;p&gt;贴上标签之后，就造成僵化。对于人才的选拔就陷入&lt;code class=&quot;highlighter-rouge&quot;&gt;平庸&lt;/code&gt;，平庸的人才进去之后造成更平庸的招聘，结果使企业裹足不前。
世界上伟大的企业不多，google我认为是最出色的一家，他们对人才的理念是非常开放的，只要是人才他们不惜一切代价，他们爱人才如命，他们会为找到某一个州的人才，专门去那边开个办公室，让他们办公。
他们对人才的定义绝不会是专业领域这么狭隘，而是通才，极具魅力的天才，这些天才需要慧眼识珠，也许你平时只会觉得他是个怪咖。也许就是你一直小看的人。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/interview/mianshiji-4.jpg&quot; alt=&quot;interview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/interview/mianshiji-3.jpg&quot; alt=&quot;interview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;越扯越远。
关于最近这些企业的面试记录，在印象笔记中的另一篇文章，有较为详细的叙述。此处只作为今天感想的一些点做分散的分析。
总之我感觉，在这里，面的越多会越累。很多企业叫你去现场面试很随意。因为毕竟是我们跑腿，他们几乎零成本。而问来问去的问题很平庸，选拔人才的眼光平庸。
而更重要的是，自己宝贵的时间，平时都是分秒必争的，现在却大段的白白花在上面。比如今天一下午就这么过去了。路上花了两小时。
所以，我现在面试，尽量选择低效时间去。高效时间我要集中精力学习一切我感兴趣的东西。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/interview/mianshiji-2.jpg&quot; alt=&quot;interview&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                    ---rsg 5/11 17:42  写作时长34分钟
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>石曙光</name></author><summary type="html">先描述一下刚刚收到的淘宝的技术官的电话面试吧 问的问题主要有： 1、先介绍一下自己这几年技术方面的东西（这个技术官人不错，废话不多，直入主题，要求都是干货）。 2、在诺基亚做的java项目的技术细节，步步追问，问的很细，然后问性能的解决方案，架构上的不足的解决方案等等。 3、诺基亚做的项目中最难的是哪一项。刚刚聊的技术实现按过程中，最复杂的是哪一项。具体介绍。 4、JVM相关：GC等。HashMap线程安全等。</summary></entry><entry><title type="html">Welcome to My World</title><link href="http://localhost:4000/life/2018/05/10/welcome-to-my-world.html" rel="alternate" type="text/html" title="Welcome to My World" /><published>2018-05-10T23:59:00+08:00</published><updated>2018-05-10T23:59:00+08:00</updated><id>http://localhost:4000/life/2018/05/10/welcome-to-my-world</id><content type="html" xml:base="http://localhost:4000/life/2018/05/10/welcome-to-my-world.html">&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/elvis-1.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;center&gt;猫王&lt;/center&gt;

&lt;p&gt;&lt;br /&gt;
记得&lt;a href=&quot;https://baike.baidu.com/item/%E5%9F%83%E5%B0%94%E7%BB%B4%E6%96%AF%C2%B7%E6%99%AE%E9%9B%B7%E6%96%AF%E5%88%A9/2635188?fr=aladdin&quot;&gt;猫王&lt;/a&gt;唱过一首歌，叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;《Welcome to My World》&lt;/code&gt;。
这首歌我耳熟能详，我尤其喜欢它的现场版，由杰出的年轻&lt;a href=&quot;https://en.wikipedia.org/wiki/James_Burton&quot;&gt;James Burton&lt;/a&gt;伴奏。&lt;br /&gt;
歌词也好，唱法也好，现场的氛围也好，James的演奏也好，都让我十分感动。&lt;br /&gt;
感动的想起往事，想起童年，恋旧起来，怀念起来，沉浸在其中。&lt;br /&gt;
这种一种特殊的情感，这是一种很奇妙的组合，它来源于一个歌手，一个乐队，一个场合，一场奇妙的配合。
却能让人产生这种难以言述的情感。仿佛人性中最柔软部分就在里面，仿佛，人生的意义在里面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Welcome to my world.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;好像猫王每次唱这首歌的时候，都特别动情。大概我们有相似的地方吧，这是一种背后的孤独，又坚强的隐忍和善意的呼唤。&lt;br /&gt;
旋律好，歌词好，吉他好，唱的更好。猫王那浑厚清澈的嗓音，真是无人能出其右。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/elvis-james.jpg&quot; alt=&quot;James&quot; /&gt;&lt;/p&gt;
&lt;center&gt;Elvis Presley（左），James Burton（右）&lt;/center&gt;</content><author><name>石曙光</name></author><summary type="html">猫王</summary></entry><entry><title type="html">你好，世界</title><link href="http://localhost:4000/jekyll/2018/05/10/welcome-to-jekyll.html" rel="alternate" type="text/html" title="你好，世界" /><published>2018-05-10T19:01:07+08:00</published><updated>2018-05-10T19:01:07+08:00</updated><id>http://localhost:4000/jekyll/2018/05/10/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/2018/05/10/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hi&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;C语言是一切语言的基石，&lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt;就诞生于它，而&lt;a href=&quot;https://blog.csdn.net/piantoutongyang&quot;&gt;Java&lt;/a&gt;起源于C++。&lt;/p&gt;</content><author><name>石曙光</name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>